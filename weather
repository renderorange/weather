#!/usr/bin/env perl

use strict;
use warnings;

use Getopt::Long  ();
use Pod::Usage    ();
use File::HomeDir ();
use Config::Tiny  ();
use HTTP::Tiny    ();
use JSON::MaybeXS ();

my $VERSION = '2.00';

my $opt = {};

Getopt::Long::GetOptions(
    "current"  => \$opt->{current},
    "forecast" => \$opt->{forecast},
    "version"  => \$opt->{version},
    "help"     => \$opt->{help},
    "man"      => \$opt->{man},
) or Pod::Usage::pod2usage( -exitval => 1, -verbose => 0 );

Pod::Usage::pod2usage( -exitval => 0, -verbose => 1 ) if $opt->{help};
Pod::Usage::pod2usage( -exitval => 0, -verbose => 2, noperldoc => 1 ) if $opt->{man};

if ( $opt->{version} ) {
    print "$VERSION\n";
    exit 0;
}

Pod::Usage::pod2usage( -exitval => 1, -verbose => 0 ) unless ( $opt->{current} || $opt->{forecast} );

my $home      = File::HomeDir->my_home;
my $file      = '.weatherrc';
my $file_path = "$home/$file";

die( "$file_path does not exist\n" ) unless -e $file_path;
my $config = Config::Tiny->read( $file_path );

die( "the production key for openweathermap is not present in $file_path\n" )
    unless exists $config->{openweathermap}->{production}
        && $config->{openweathermap}->{production} =~ /^\w+$/;

my $http_tiny = HTTP::Tiny->new();

my $geolocation_api = 'http://ip-api.com/json';
my $res = $http_tiny->get( $geolocation_api );

my $location = {};

if ( $res->{success} ) {
    my $content = JSON::MaybeXS::decode_json( $res->{content} );

    # TODO: this should be a little cleaner
    # to request only the fields we want
    $location->{zip}      = $content->{zip};
    $location->{city}     = $content->{city};
    $location->{state}    = $content->{regionName};
    $location->{country}  = $content->{country};
    $location->{timezone} = $content->{timezone};
    $location->{lon}      = $content->{lon};
    $location->{lat}      = $content->{lat};
}
else {
    die( "the query to $geolocation_api wasn't successful\n" );
}

__END__

=pod

=head1 NAME

weather - cli program to get the weather for your location

=head1 SYNOPSIS

  weather [--current] [--forecast]
          [--version]
          [--help] [--man]

=head1 DESCRIPTION

This program will retrieve weather condition and forecast details for your location.

=head1 OPTIONS

  --current     print the current conditions
  --forecast    print the next 4 day forecast
  --version     print the version and exit
  --help        print this dialogue
  --man         display the full documentation

=head1 EXAMPLES

=over

=item get the current conditions

  weather --current

=item get the current conditions and 4 day forecast

  weather --current --forecast

=item get the 4 day forecast only

  weather --forecast

=back

=head1 DEPENDENCIES

=over

=item Getopt::Long

=item Pod::Usage

=item File::HomeDir

=item Config::Tiny

=item HTTP::Tiny

=item JSON::MaybeXS

=back

=head1 AUTHOR

Blaine Motsinger, <blaine@renderorange.com>

=cut
