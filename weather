#!/usr/bin/env perl

use strict;
use warnings;

use Getopt::Long  ();
use Pod::Usage    ();
use Config::Tiny  ();
use HTTP::Tiny    ();
use JSON::MaybeXS ();

my $VERSION = '2.01';

my $opt = {
    units => 'imperial',
};

Getopt::Long::GetOptions(
    "current"  => \$opt->{current},
    "version"  => \$opt->{version},
    "help"     => \$opt->{help},
    "man"      => \$opt->{man},
    "devel"    => \$opt->{devel},
    "debug"    => \$opt->{debug},
) or Pod::Usage::pod2usage( -exitval => 1, -verbose => 0 );

Pod::Usage::pod2usage( -exitval => 0, -verbose => 1 ) if $opt->{help};
Pod::Usage::pod2usage( -exitval => 0, -verbose => 2, noperldoc => 1 ) if $opt->{man};

if ( $opt->{version} ) {
    print "$VERSION\n";
    exit 0;
}

Pod::Usage::pod2usage( -exitval => 1, -verbose => 0 ) unless ( $opt->{current} );

require Data::Dumper if $opt->{debug};

print "# [DEBUG] opt\n" .
      Data::Dumper::Dumper( $opt ) . "\n" if $opt->{debug};

my $home      = $ENV{HOME};
my $file      = '.weatherrc';
my $file_path = "$home/$file";

die( "$file_path does not exist\n" ) unless -e $file_path;
my $config = Config::Tiny->read( $file_path );

my $tier = $opt->{devel} ? 'development' : 'production';
die( "the $tier key for openweathermap is not present in $file_path\n" )
    unless exists $config->{openweathermap}->{$tier}
        && $config->{openweathermap}->{$tier} =~ /^\w+$/;

my $http_tiny = HTTP::Tiny->new();

my $geolocation_api = 'http://ip-api.com/json';
my $geo_res = $http_tiny->get( $geolocation_api );

print "# [DEBUG] geo_res\n" .
      Data::Dumper::Dumper( $geo_res ) . "\n" if $opt->{debug};

my $location = {};

if ( $geo_res->{success} ) {
    my $content = JSON::MaybeXS::decode_json( $geo_res->{content} );

    print "# [DEBUG] geo_res content\n" .
        Data::Dumper::Dumper( $content ) . "\n" if $opt->{debug};

    # TODO: this should be a little cleaner
    # to request only the fields we want
    $location->{zip}          = $content->{zip};
    $location->{city}         = $content->{city};
    $location->{region}       = $content->{regionName};
    $location->{country}      = $content->{country};
    $location->{country_code} = lc $content->{countryCode};
    $location->{timezone}     = $content->{timezone};
    $location->{lon}          = $content->{lon};
    $location->{lat}          = $content->{lat};
}
else {
    die( "the query to $geolocation_api wasn't successful\n" );
}

my $current_conditions_api = "https://api.openweathermap.org/data/2.5/weather?zip=$location->{zip},$location->{country_code}&appid=$config->{openweathermap}->{$tier}&units=$opt->{units}";
my $current_res = $http_tiny->get( $current_conditions_api );

print "# [DEBUG] current_res\n" . 
      Data::Dumper::Dumper( $current_res ) . "\n" if $opt->{debug};

my $current_conditions = {};

if ( $current_res->{success} ) {
    $current_conditions = JSON::MaybeXS::decode_json( $current_res->{content} );
}
else {
    die( "the query to $current_conditions_api wasn't successful\n" );
}

print "# [DEBUG] current_conditions\n" .
      Data::Dumper::Dumper( $current_conditions ) . "\n" if $opt->{debug};

print "\nweather for $location->{city}, $location->{region}\n\n" .
      "currently:\t$current_conditions->{weather}->[0]->{description}\n" .
      "temp:\t\t$current_conditions->{main}->{temp} F\n" .
      "humidity:\t$current_conditions->{main}->{humidity} %\n" .
      "pressure:\t$current_conditions->{main}->{pressure} hpa\n" . 
      "wind:\t\t$current_conditions->{wind}->{speed} mph\n" .
      "clouds:\t\t$current_conditions->{clouds}->{all} %\n" . 
      "\n"
    if $opt->{current};

__END__

=pod

=head1 NAME

weather - cli program to get the weather for your location

=head1 SYNOPSIS

  weather [--current]
          [--version]
          [--help] [--man]
          [--devel] [--debug]

=head1 DESCRIPTION

This program will retrieve weather condition and forecast details for your location.

=head1 OPTIONS

  --current     print the current conditions
  --version     print the version and exit
  --help        print this dialogue
  --man         display the full documentation
  --devel       use a development tier key for openweathermap
  --debug       dump the internals and query responses

=head1 EXAMPLES

=over

=item get the current conditions

  weather --current

=back

=head1 CONFIGURATION

The configuration file for weather is located in the homedir of the running user, named .weatherrc

The file may contain two sections, production and development, under the parent section, openweathermap.

  ~ $ cat .weatherrc
  [openweathermap]
  production = 1q2w3e4r5t6y7u8i9o0p1q2w3e4r5t6y
  development = 0p9o8i7u6y5t4r3e2w1q0p9o8i7u6y5t

The development section is required in the case of using the --devel switch for weather.

The production section is required in normal operation.

=head1 DEPENDENCIES

=over

=item Getopt::Long

=item Pod::Usage

=item Config::Tiny

=item HTTP::Tiny

=item JSON::MaybeXS

=item Data::Dumper

=back

=head1 AUTHOR

Blaine Motsinger, <blaine@renderorange.com>

=head1 LICENSE AND COPYRIGHT

This software is available under the MIT license.

Copyright (c) 2019 Blaine Motsinger

=cut
